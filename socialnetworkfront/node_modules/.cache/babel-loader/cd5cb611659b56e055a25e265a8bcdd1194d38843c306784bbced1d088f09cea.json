{"ast":null,"code":"function setToken(token) {\n  localStorage.setItem('token', token);\n}\nfunction getToken() {\n  return localStorage.getItem('token');\n}\nasync function loginUser(credentials) {\n  return fetch('http://localhost:9000/api/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(credentials),\n    mode: 'cors'\n  }).then(data => data.json()).then(response => {\n    setToken(response.token);\n    return response;\n  }).catch(error => console.error('Fetch error:', error));\n}\nasync function registerUser(userData) {\n  return fetch('http://localhost:9000/api/registration', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userData),\n    mode: 'cors'\n  }).then(data => data.json()).then(response => {\n    // console.log(response);\n    return response;\n  }).catch(error => console.error('Fetch error:', error));\n}\nasync function getCurrentUser() {\n  const token = getToken();\n  if (!token) {\n    console.error('Token not found');\n    return null;\n  }\n  const tokenWithoutDoubleQuotes = token.replace(/^\"(.*)\"$/, '$1');\n  const headers = {\n    'Content-Type': 'application/json',\n    'Authorization': `Bearer ${tokenWithoutDoubleQuotes}`\n  };\n  try {\n    const response = await fetch('http://localhost:9000/api/get/user', {\n      method: 'GET',\n      headers: headers,\n      mode: 'cors'\n    });\n    if (!response.ok) {\n      // console.log(response)\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const user = await response.json();\n    console.log('User:', user);\n    return user;\n  } catch (error) {\n    console.error('Fetch error:', error);\n    throw error;\n  }\n}\nasync function getDefaultProfilePicture() {\n  const token = getToken();\n  if (!token) {\n    return null;\n  }\n  const tokenWithoutDoubleQuotes = token.replace(/^\"(.*)\"$/, '$1');\n  const headers = {\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${tokenWithoutDoubleQuotes}`\n  };\n  try {\n    const response = await fetch('http://localhost:9000/assets/images/avatar.jpg', {\n      method: 'GET',\n      headers: headers,\n      mode: 'cors'\n    });\n    if (!response.ok) {\n      // console.log(response);\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const imageUrl = response.url;\n    // console.log('Profile Picture URL:', imageUrl);\n\n    return imageUrl;\n  } catch (error) {\n    console.error('Fetch error:', error);\n    throw error;\n  }\n}\nasync function editUserInfo(updatedUserInfo) {\n  const token = getToken();\n  if (!token) {\n    return null;\n  }\n  const tokenWithoutDoubleQuotes = token.replace(/^\"(.*)\"$/, '$1');\n  const headers = {\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${tokenWithoutDoubleQuotes}`\n  };\n  try {\n    const response = await fetch('http://localhost:9000/api/profile/update', {\n      method: 'PUT',\n      headers: headers,\n      mode: 'cors',\n      body: JSON.stringify(updatedUserInfo)\n    });\n    if (!response.ok) {\n      // console.log(response);\n      throw new Error(\"First and last name must be in correct format!\");\n    }\n    const result = await response.json();\n    // console.log('Edit User Info Result:', result);\n    return result;\n  } catch (error) {\n    console.error('Fetch error:', error);\n    throw error;\n  }\n}\nasync function changePassword(changePasswordApi) {\n  const token = getToken();\n  if (!token) {\n    return null;\n  }\n  const tokenWithoutDoubleQuotes = token.replace(/^\"(.*)\"$/, '$1');\n  const headers = {\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${tokenWithoutDoubleQuotes}`\n  };\n  try {\n    const response = await fetch('http://localhost:9000/api/update/password', {\n      method: 'PUT',\n      headers: headers,\n      mode: 'cors',\n      body: JSON.stringify(changePasswordApi)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      // console.log('Change Password Error:', errorData);\n      throw new Error(errorData.message || 'Error changing password');\n    }\n    const result = await response.json();\n    // console.log('Change Password Result:', result);\n    return result;\n  } catch (error) {\n    console.error('Fetch error:', error);\n    throw error;\n  }\n}\nasync function createPost(postData) {\n  const token = getToken();\n  if (!token) {\n    return null;\n  }\n  const tokenWithoutDoubleQuotes = token.replace(/^\"(.*)\"$/, '$1');\n  const headers = {\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${tokenWithoutDoubleQuotes}`\n  };\n  try {\n    const response = await fetch('http://localhost:9000/api/post/create', {\n      method: 'POST',\n      headers: headers,\n      mode: 'cors',\n      body: JSON.stringify(postData)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      // console.log('Create Post Error:', errorData);\n      throw new Error(errorData.message || 'Error creating post');\n    }\n    const result = await response.json();\n    // console.log('Create Post Result:', result);\n    return result;\n  } catch (error) {\n    console.error('Fetch error:', error);\n    throw error;\n  }\n}\nasync function getFriendsPosts() {\n  const token = getToken();\n  if (!token) {\n    return null;\n  }\n  const tokenWithoutDoubleQuotes = token.replace(/^\"(.*)\"$/, '$1');\n  const headers = {\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${tokenWithoutDoubleQuotes}`\n  };\n  try {\n    const response = await fetch('http://localhost:9000/api/home/posts', {\n      method: 'GET',\n      headers: headers,\n      mode: 'cors'\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Error fetching posts');\n    }\n    const result = await response.json();\n    return result;\n  } catch (error) {\n    console.error('Fetch error:', error);\n    throw error;\n  }\n}\nexport { setToken, getToken, loginUser, registerUser, getCurrentUser, getDefaultProfilePicture, editUserInfo, changePassword, createPost, getFriendsPosts };","map":{"version":3,"names":["setToken","token","localStorage","setItem","getToken","getItem","loginUser","credentials","fetch","method","headers","body","JSON","stringify","mode","then","data","json","response","catch","error","console","registerUser","userData","getCurrentUser","tokenWithoutDoubleQuotes","replace","ok","Error","status","user","log","getDefaultProfilePicture","Authorization","imageUrl","url","editUserInfo","updatedUserInfo","result","changePassword","changePasswordApi","errorData","message","createPost","postData","getFriendsPosts"],"sources":["D:/Fax/III godina/diplomski/SocialNetworkReact/socialnetworkfront/src/service/BackendService.js"],"sourcesContent":["function setToken(token) {\r\n    localStorage.setItem('token', token);\r\n  }\r\n  \r\n  function getToken() {\r\n    return localStorage.getItem('token');\r\n  }\r\n  \r\n  async function loginUser(credentials) {\r\n    return fetch('http://localhost:9000/api/login', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(credentials),\r\n      mode: 'cors',\r\n    })\r\n      .then((data) => data.json())\r\n      .then((response) => {\r\n        setToken(response.token); \r\n        return response;\r\n      })\r\n      .catch((error) => console.error('Fetch error:', error));\r\n  }\r\n  \r\n\r\n  async function registerUser(userData) {\r\n  return fetch('http://localhost:9000/api/registration', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(userData),\r\n    mode: 'cors',\r\n  })\r\n    .then((data) => data.json())\r\n    .then((response) => {\r\n      // console.log(response);\r\n      return response;\r\n    })\r\n    .catch((error) => console.error('Fetch error:', error));\r\n}\r\n\r\n\r\nasync function getCurrentUser() {\r\n  const token = getToken();\r\n\r\n  if (!token) {\r\n    console.error('Token not found');\r\n    return null; \r\n  }\r\n\r\n  const tokenWithoutDoubleQuotes = token.replace(/^\"(.*)\"$/, '$1');\r\n\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    'Authorization': `Bearer ${tokenWithoutDoubleQuotes}`,\r\n  };\r\n  \r\n\r\n  try {\r\n    const response = await fetch('http://localhost:9000/api/get/user', {\r\n      method: 'GET',\r\n      headers: headers,\r\n      mode: 'cors', \r\n\r\n    });\r\n\r\n    if (!response.ok) {\r\n      // console.log(response)\r\n      throw new Error(`HTTP error! Status: ${response.status}`);\r\n    }\r\n\r\n    const user = await response.json();\r\n    console.log('User:', user);\r\n\r\n    return user;\r\n  } catch (error) {\r\n    console.error('Fetch error:', error);\r\n    throw error; \r\n  }\r\n}\r\n\r\n\r\n\r\nasync function getDefaultProfilePicture() {\r\n  const token = getToken();\r\n\r\n  if (!token) {\r\n    return null;\r\n  }\r\n\r\n  const tokenWithoutDoubleQuotes = token.replace(/^\"(.*)\"$/, '$1');\r\n\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    Authorization: `Bearer ${tokenWithoutDoubleQuotes}`,\r\n  };\r\n\r\n  try {\r\n    const response = await fetch('http://localhost:9000/assets/images/avatar.jpg', {\r\n      method: 'GET',\r\n      headers: headers,\r\n      mode: 'cors',\r\n    });\r\n\r\n    if (!response.ok) {\r\n      // console.log(response);\r\n      throw new Error(`HTTP error! Status: ${response.status}`);\r\n    }\r\n    const imageUrl = response.url;\r\n    // console.log('Profile Picture URL:', imageUrl);\r\n\r\n    return imageUrl;\r\n  } catch (error) {\r\n    console.error('Fetch error:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n\r\nasync function editUserInfo(updatedUserInfo) {\r\n  const token = getToken();\r\n\r\n  if (!token) {\r\n    return null;\r\n  }\r\n\r\n  const tokenWithoutDoubleQuotes = token.replace(/^\"(.*)\"$/, '$1');\r\n\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    Authorization: `Bearer ${tokenWithoutDoubleQuotes}`,\r\n  };\r\n\r\n  try {\r\n    const response = await fetch('http://localhost:9000/api/profile/update', {\r\n      method: 'PUT', \r\n      headers: headers,\r\n      mode: 'cors',\r\n      body: JSON.stringify(updatedUserInfo), \r\n    });\r\n\r\n    if (!response.ok) {\r\n      // console.log(response);\r\n      throw new Error(\"First and last name must be in correct format!\");\r\n    }\r\n\r\n    const result = await response.json();\r\n    // console.log('Edit User Info Result:', result);\r\n    return result;\r\n  } catch (error) {\r\n    console.error('Fetch error:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n\r\nasync function changePassword(changePasswordApi) {\r\n  const token = getToken();\r\n\r\n  if (!token) {\r\n    return null;\r\n  }\r\n\r\n  const tokenWithoutDoubleQuotes = token.replace(/^\"(.*)\"$/, '$1');\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    Authorization: `Bearer ${tokenWithoutDoubleQuotes}`,\r\n  };\r\n\r\n  try {\r\n    const response = await fetch('http://localhost:9000/api/update/password', {\r\n      method: 'PUT',\r\n      headers: headers,\r\n      mode: 'cors',\r\n      body: JSON.stringify(changePasswordApi),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json(); \r\n      // console.log('Change Password Error:', errorData);\r\n      throw new Error(errorData.message || 'Error changing password');\r\n    }\r\n\r\n    const result = await response.json();\r\n    // console.log('Change Password Result:', result);\r\n    return result;\r\n  } catch (error) {\r\n    console.error('Fetch error:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n\r\nasync function createPost(postData) {\r\n  const token = getToken();\r\n\r\n  if (!token) {\r\n    return null;\r\n  }\r\n\r\n  const tokenWithoutDoubleQuotes = token.replace(/^\"(.*)\"$/, '$1');\r\n\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    Authorization: `Bearer ${tokenWithoutDoubleQuotes}`,\r\n  };\r\n\r\n  try {\r\n    const response = await fetch('http://localhost:9000/api/post/create', {\r\n      method: 'POST',\r\n      headers: headers,\r\n      mode: 'cors',\r\n      body: JSON.stringify(postData),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      // console.log('Create Post Error:', errorData);\r\n      throw new Error(errorData.message || 'Error creating post');\r\n    }\r\n\r\n    const result = await response.json();\r\n    // console.log('Create Post Result:', result);\r\n    return result;\r\n  } catch (error) {\r\n    console.error('Fetch error:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n\r\n\r\nasync function getFriendsPosts() {\r\n  const token = getToken();\r\n\r\n  if (!token) {\r\n    return null;\r\n  }\r\n\r\n  const tokenWithoutDoubleQuotes = token.replace(/^\"(.*)\"$/, '$1');\r\n\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    Authorization: `Bearer ${tokenWithoutDoubleQuotes}`,\r\n  };\r\n\r\n  try {\r\n    const response = await fetch('http://localhost:9000/api/home/posts', {\r\n      method: 'GET',\r\n      headers: headers,\r\n      mode: 'cors'\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Error fetching posts');\r\n    }\r\n\r\n    const result = await response.json();\r\n    return result;\r\n  } catch (error) {\r\n    console.error('Fetch error:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n  export { setToken, getToken, loginUser, registerUser, getCurrentUser, getDefaultProfilePicture, editUserInfo, changePassword, createPost, getFriendsPosts };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}